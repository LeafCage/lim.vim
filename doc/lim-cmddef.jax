*lim-cmddef.txt*	ユーザ定義コマンド作成時に有用なモジュール。
*lim-cmddef*

==============================================================================
概要						*lim-cmddef-introduction*

ユーザ定義コマンド|user-commands|作成時に有用なモジュール。
使用実績) flashcards.vim, oreo.vim


==============================================================================
インターフェイス				*lim-cmddef-interface*

------------------------------------------------------------------------------
関数						*lim-cmddef-functions*

						*lim#cmddef#newCmdcmpl()*
lim#cmddef#newCmdcmpl({cmdline}, {cursorpos}, [{behavior}])
	これはコマンド補完関数|:command-completion-customlist|内で利用し、コマ
	ンド補完関数の引数 CmdLine と CursorPos を{cmdline} {cursorpos}に渡し
	て使用する。
	コマンド補完関数作成を補助するオブジェクトCmdcmplを返す。
	省略可能な引数{behavior}は辞書であり、次のキーを持たせることができる。
	--------~
	longoptbgn		(文字列)
		既定値: "--"
		オプション引数の頭に付く文字列。引数先頭文字がこれにマッチすれ
		ばオプション引数と見なされる。

	shortoptbgn		(文字列)
		既定値: "-"
		一文字オプション引数の頭に付く文字列。一文字オプションはこれに
		続けて複数を一度に指定することができる。

	order			(文字列のリスト)
		既定値: ["long", "short", "other"]
		リストの要素は "long" "short" "other" のいずれかでなければなら
		ない。補完候補{candidates}の中のロングオプション、ショートオプ
		ション、その他の文字列をどの順番で並べるかを指定する。 >
			["short", "long", "other"]
<		にすると、ショートオプションの方が先に並べられる。

	sort			(辞書)
		既定値: {"long": &ic, "short": &ic, "other": -1}
		補完候補{candidates}をソートするかどうかを指定する。0 にすると
		通常のソートが、1 にすると大文字小文字を区別しないソートが、関
		数名/関数参照を指定するとその関数を利用したソートが行われる。
		-1 にするとソートは行われない。
		既定ではオプション値に対してのみソートする。

	================~
	Cmdcmplオブジェクトは以下の変数とメソッドを持つ。
	変数は変更可能だが、そうすると各メソッドの結果が変化するかもしれない。
	--------~
	Cmdcmpl.arglead			(文字列)
		補完対象の文字列。

	Cmdcmpl.preword			(文字列)
		|arglead|の1つ前の入力文字列。

	Cmdcmpl.beens			(リスト)
		既に入力されているコマンドライン文字列を引数ごとに区切ってリス
		ト化したもの。

	Cmdcmpl.command			(文字列)
		入力されている文字列の内、コマンドにあたる部分。

	--------~
	Cmdcmpl.has_bang()
	入力中のコマンドが !修飾子付きなら1、そうでなければ0を返す。


	Cmdcmpl.count_lefts([{ignorepat}])
	行頭からカーソル位置までにいくつ完成した引数をそのコマンドが持ってるか
	を返す。現在入力補完中の引数は数に含めない。1番目の引数を補完中なら、0
	を返す。
	{ignorepat}で指定されたパターンにマッチする引数は無視して数えられる。
	{ignorepat}が指定されていない場合、|lim#cmddef#newCmdcmpl()|で初期化さ
	れた shortoptbgn か longoptbgn で始まり非空白文字が続くパターンが使わ
	れる。 >
		:Cmd --opt1 arg1 arg2
<	で{cursorpos}が16のとき(arg1の後の空白にカーソルがあるとき)、
	{ignorepat}が '^-' だと結果が1になる。{ignorepat}が指定なしならば2。
	これは - で始まる引数はオプションとして無視したいときなどに役立つ。
	ちなみに 内部変数について、self.trackwords[self.count_lefts()]
	は self.preword に、get(self.beens, self.count_lefts(), '') は
	self.argleadに一致する。


	Cmdcmpl.should_optcmpl()
	現在のArgleadが|lim#cmddef#newCmdcmpl()|で初期化された shortoptbgn
	longoptbgn のパターンのいずれかマッチすれば1を返す。


	Cmdcmpl.is_matched({pat})
	現在のArgleadがパターン{pat}にマッチすれば1を返す。


	Cmdcmpl.get({idx}, [[{is-ignoreopt}], [{default}]])
	Cmdcmpl.get({regexp}, [{default}])
	Cmdcmpl.get({list}, [[{listidx}], [{default}]])
	コマンドライン全体の単語から一番初めにマッチした単語文字列を返す。マッ
	チするものがなければ{default}(既定: "")を返す。
	インデックス番号{idx} 正規表現{regexp} リスト{list}の3種類の指定ができ
	る。{idx}の場合、{is-ignoreopt}に1を指定するとオプション引数をインデッ
	クスに数えない (単語に含まれていないかのように扱う)。
	第一引数がリスト{list}の場合、いずれかの要素に一致するものを返す。
	{listidx}が指定された場合、マッチした結果からそのindexの要素を返す。


	Cmdcmpl.matches({regexp})
	Cmdcmpl.matches({list})
	コマンドライン全体の単語から正規表現{regexp}にマッチしたもの全てをリス
	トにして返す。{list}リストの場合、いずれかの要素に一致するもの全てを返
	す。


	Cmdcmpl.get_left({idx}, [[{ignoreopt}], [{default}]])
	Cmdcmpl.get_left({regexp}, [{default}])
	Cmdcmpl.get_left({list}, [{idx}, [{default}]])
	カーソルより左のコマンドラインの単語から一番初めにマッチした単語文字列
	を返す。マッチするものがなければ{default}(既定: "")を返す。
	インデックス番号{idx} 正規表現{regexp} リスト{list}の3種類の指定ができ
	る。{idx}の場合、{is-ignoreopt}に1を指定するとオプション引数をインデッ
	クス番号に数えない (単語に含まれていないかのように扱う)。
	第一引数がリスト{list}の場合、いずれかの要素に一致するものを返す。
	{listidx}が指定された場合、マッチした結果からそのindexの要素を返す。


	Cmdcmpl.match_lefts({regexp})
	Cmdcmpl.match_lefts({list})
	カーソルより左のコマンドラインの単語から正規表現{regexp}にマッチしたも
	の全てをリストにして返す。{list}リストの場合、いずれかの要素に一致する
	ものを全て返す。


	Cmdcmpl.mill({candidates}, [[{match-type}], [{behavior}]])
	補完候補のリスト{candidates}から、文脈に応じて不要なものを削除したリス
	トを返す。文脈とは、既に入力されている文字列や、補完対象の文字列
	(arglead)などである。{candidates}は文字列のリストだが、さらにその中で
	同時に指定することが出来ないものをリストにすることで排他制御が出来る。 >
		[['--foo', '-f'], '--bar', ['--open', '--close', '-o', '-c']]
<	といった具合に。オプションのショートネームや同時に指定できないものを一
	纏(ひとまと)めにする。
	補完対象に対するマッチングは既定では前方一致だが、{match-type}で変更す
	ることができる。{match-type}には次の文字列のいずれかを指定する。
		"forward"	arglead に前方一致するものに絞り込む。既定。
		"backword"	arglead に後方一致するものに絞り込む。
		"partial"	arglead に部分一致するものに絞り込む。
		"exact"		arglead に完全一致するものに絞り込む。
		"none"		arglead による絞り込みをしない。

	辞書{behavior}で挙動を変更可能。{behavior}は以下のキーを持たせられる。
	--------~
	reuses			(文字列のリスト/数値)
		既定値: []
		数値1を指定すると入力され終わった他の引数に被る補完候補があっ
		てもそれは取り除かれない。リストを指定すると、そのリストで指定
		された補完候補は取り除かれない。
		既定は、入力され終わった引数と被る補完候補は全て取り除く。

	order			(文字列のリスト)
		既定値: |lim#cmddef#newCmdcmpl()|で初期化された値
		リストの要素は "long" "short" "other" のいずれかでなければなら
		ない。補完候補{candidates}の中のロングオプション、ショートオプ
		ション、その他の文字列をどの順番で並べるかを指定する。 >
			["short", "long", "other"]
<		にすると、ショートオプションの方が先に並べられる。

	sort			(辞書)
		既定値: |lim#cmddef#newCmdcmpl()|で初期化された値
			({"long": &ic, "short": &ic, "other": -1})
		補完候補{candidates}をソートするかどうかを指定する。0 にすると
		通常のソートが、1 にすると大文字小文字を区別しないソートが、関
		数名/関数参照を指定するとその関数を利用したソートが行われる。
		-1 にするとソートは行われない。
		既定ではオプション値に対してのみソートする。



						*lim#cmddef#newCmdParser()*
lim#cmddef#newCmdParser({args}, [{behavior}])
	コマンド実行時に渡された引数を解釈するパーサ CmdParser を返す。{args}
	はコマンド引数を単語で区切ってリスト化させたものである。
	省略可能な引数{behavior}は辞書であり、次のキーを持たせることができる。
	----------------~
	longoptbgn		(文字列)
		既定値: "--"
		オプション引数の頭に付く文字列。引数先頭文字がこれにマッチすれ
		ばオプション引数と見なされる。

	shortoptbgn		(文字列)
		既定値: "-"
		一文字オプション引数の頭に付く文字列。一文字オプションはこれに
		続けて複数を一度に指定することができる。

	assignpat		(文字列のリスト)
		既定値: ["="]
		値を取るオプションが利用する代入記号。複数指定可能。
		NOTE:TODO

	================~
	CmdParser オブジェクトは以下の変数とメソッドを持つ。
	--------~
	CmdParser.args			(リスト)
		初期化時に渡されたコマンドライン引数リスト{args}。後記のメソッ
		ドの副作用で幾つかの要素が削除されるかもしれない。

	CmdParser.args_original		(リスト)
		初期化時に渡されたままの args。args と違ってメソッドの副作用を
		受けない。
	--------~
	CmdParser.get({idx}, [[{is-ignoreopt}], [{default}]])
	CmdParser.get({regexp}, [{default}])
	CmdParser.get({list}, [[{listidx}], [{default}]])
	コマンドライン引数から一番初めにマッチした単語文字列を返す。マッチする
	ものがなければ{default}(既定: "")を返す。
	インデックス番号{idx} 正規表現{regexp} リスト{list}の3種類の指定ができ
	る。{idx}の場合、{is-ignoreopt}に1を指定するとオプション引数をインデッ
	クス番号に数えない (単語に含まれていないかのように扱う)。
	第一引数がリスト{list}の場合、いずれかの要素に一致するものを返す。
	{listidx}が指定された場合、マッチした結果からそのindexの要素を返す。


	CmdParser.matches({pat})
	コマンドライン引数から{pat}にマッチしたもの全てをリストにして返す。
	{pat}がリストの場合、いずれかの要素に一致するもの全てを返す。


	CmdParser.divide({pat}, [{way}])
	パターン{pat}に従って複数のグループに分割した args を返す。分割のやり
	方{way}には "start" "sep" "stop" のいずれかを指定する (既定: "sep")。
	"start" の場合はパターン{pat}にマッチした要素を新しいグループの始まり
	とする。"sep" を指定した場合はパターン{pat}を区切りとして args を分割
	し、"sep" となった要素そのものは取り除かれる。"stop" を指定した場合は
	、パターン{pat}を分割グループの終点とする。


	CmdParser.filter({string}, [{scope}])
	{string}は|filter()|で使われるフィルタパターンと同じである。
	args から {string} の評価が 0 の要素を取り除く (v:val にはargs の各要
	素が代入される)。{string}の中で関数ローカル変数を使いたい場合には、
	{scope}に|l:|を渡さなければいけない。
	args を返す。


	CmdParser.parse_options({optdict}, [{range}])
	どのようなオプション引数が使われたのかを解釈する。args の各要素から
	{optdict}で指定されたパターンにマッチするものを評価し、オプション引数
	として評価された要素は args から取り除かれる。
	{range}を指定すると探索範囲を指定することができる。{range}に数値を指定
	した場合、そのインデックスの要素だけを評価する。始点終点2つの要素を持
	つリストを指定した場合、その範囲の要素だけを評価する。
	{optdict}は辞書であり、キーにオプション名、値にリストを指定する。
	リストの要素はオプションが省略されたときのデフォルト値(数値または文字
	列)と引数のパターン(文字列のリスト)である。これらは順不同で指定できる
	。 >
		parser.parse_options({'foo': [0, ['--foo']],
		\ 'bar': [0, ['--bar']], 'baz': [1, ['--baz']]})
<	次のようにデフォルト値と引数パターンを逆にしてもよい。 >
		parser.parse_options({'foo': [['--foo'], 0],
		\ 'bar': [['--bar'], 0], 'baz': [['--baz'], 1]})
<	この場合、もし `:ExamCmd --foo xxx` というコマンドがこれを使って解釈さ
	れたならば {"foo": 1, "bar": 0, "baz": 1} という値が返される。そして
	args からは `--foo` が取り除かれる。
	オプション引数の別名がある場合、パターンをリストにすることで複数指定が
	できる。 >
	    parser.parse_options({'foo': [['--foo', '-f'], 0],
	     \ 'bar': [['--bar', '-b'], 0], 'baz': [['--baz', '-z'], 1]})
<	また、2つ目のパターンリストを渡すことが出来る。そのパターンにマッチす
	るとそのオプションは否定された(0である)と見なされる。 >
	    parser.parse_options({'foo': [['--foo', '-f'], ['--no-foo'], 0],
	     \ 'bar': [0, [], ['--no-bar']],
	     \ 'baz': [['--baz', '-z'], ['--no-baz', '-Z'], 1]})
<	この場合、--no-bar --no-baz -Z が与えられていれば、bar, baz の値は0と
	なる。引数に否定パターンと通常パターンが混在している場合、否定パターン
	の方が優先される。
	デフォルト値やパターンは省略することができる。 >
	    parser.parse_options({'foo': [['--foo']],
	     \ 'bar': [],
	     \ 'baz': [1]})
<	さらに省略することも出来る。 >
	    parser.parse_options({'foo': ['--foo'],
	     \ 'bar': 'bar_default',
	     \ 'baz': 1})
<	デフォルト値が省略された場合、それは0とみなされる。パターンが省略され
	た場合、辞書のキー(オプション名)の頭に longoptbgn (既定では"--")が付与
	されたものと見なされる。(この場合 "bar" "baz"はパターンが省略されてい
	るので、それぞれ "--" が付与された ["--bar"] と ["--baz"] がパターンと
	見なされる。)


==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:
