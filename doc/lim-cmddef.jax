*lim-cmddef.txt*	ユーザ定義コマンド作成時に有用なモジュール。
*lim-cmddef*

==============================================================================
概要						*lim-cmddef-introduction*

ユーザ定義コマンド|user-commands|作成時に有用なモジュール。
使用実績) flashcards.vim, oreo.vim


==============================================================================
インターフェイス				*lim-cmddef-interface*

------------------------------------------------------------------------------
関数						*lim-cmddef-functions*

lim#cmddef#split_into_words({str})	*lim#cmddef#split_into_words()*
	文字列{str}を単語に分割して|List|にする。単語の境は空白文字である。た
	だしバックスラッシュでエスケープされている空白文字は境にならない。


lim#cmddef#continuable()			*lim#cmddef#continuable()*
lim#cmddef#continue()				*lim#cmddef#continue()*
	|Cmpl.esc_space()|と組み合わせて使う。
	バックスラッシュでエスケープされた空白文字を含む単語を補完対象として扱
	えるようにする。
	Vim 7.3.615 以上のバージョンしかサポートしない場合や、補完候補に空白文
	字を含まない場合は利用する必要はない。


						*lim#cmddef#newCmpl()*
lim#cmddef#newCmpl({cmdline}, {cursorpos}, [{behavior}])
	これはコマンド補完関数|:command-completion-customlist|内で利用し、コマ
	ンド補完関数の引数 CmdLine と CursorPos を{cmdline} {cursorpos}に渡し
	て使用する。
	コマンド補完関数作成を補助するオブジェクト Cmpl を返す。
	省略可能な引数{behavior}は辞書であり、次のキーを持たせることができる。
	--------~
	longoptbgn		(文字列)
		既定値: "--"
		オプション引数の頭に付く文字列。引数先頭文字がこれにマッチすれ
		ばオプション引数と見なされる。

	shortoptbgn		(文字列)
		既定値: "-"
		一文字オプション引数の頭に付く文字列。一文字オプションはこれに
		続けて複数を一度に指定することができる。

	================~
	Cmplオブジェクトは以下の変数とメソッドを持つ。
	変数は変更可能だが、そうすると各メソッドの結果が変化するかもしれない。
	--------~
	Cmpl.cmdline			(文字列)
		渡された引数{cmdline}に等しい。コマンドライン全体を表す。

	Cmpl.cursorpos		(数値)
		渡された引数{cursorpos}に等しい。カーソル位置(バイト単位のイン
		デックス)を表す。コマンドライン先頭からカーソル位置までの文字
		列長に等しい。

	Cmpl.arglead			(文字列)
		補完対象の文字列。

	Cmpl.preword			(文字列)
		|arglead|の1つ前の入力文字列。

	Cmpl.inputs			(リスト)
		既に入力されているコマンドライン文字列を引数ごとに区切ってリス
		ト化したもの。

	Cmpl.command			(文字列)
		入力されている文字列の内、コマンドにあたる部分。

	--------~
	Cmpl.has_bang()
	入力中のコマンドが !修飾子付きなら1、そうでなければ0を返す。


	Cmpl.count_lefts([{ignorepat}])
	行頭からカーソル位置までにいくつ完成した引数をそのコマンドが持ってるか
	を返す。現在入力補完中の引数は数に含めない。1番目の引数を補完中なら、0
	を返す。
	{ignorepat}で指定されたパターンにマッチする引数は無視して数えられる。
	{ignorepat}が指定されていない場合、|lim#cmddef#newCmpl()|で初期化さ
	れた shortoptbgn か longoptbgn で始まり非空白文字が続くパターンが使わ
	れる。 >
		:Cmd --opt1 arg1 arg2
<	で{cursorpos}が16のとき(arg1の後の空白にカーソルがあるとき)、
	{ignorepat}が '^-' だと結果が1になる。{ignorepat}が指定なしならば2。
	これは - で始まる引数はオプションとして無視したいときなどに役立つ。
	ちなみに 内部変数について、self.trackwords[self.count_lefts()]
	は self.preword に、get(self.inputs, self.count_lefts(), '') は
	self.argleadに一致する。


	Cmpl.should_optcmpl()
	現在のArgleadが|lim#cmddef#newCmpl()|で初期化された shortoptbgn
	longoptbgn のパターンのいずれかマッチすれば1を返す。


	Cmpl.is_matched({pat})
	現在のArgleadがパターン{pat}にマッチすれば1を返す。


	Cmpl.get({idx}, [[{is-ignoreopt}], [{default}]])
	Cmpl.get({regexp}, [{default}])
	Cmpl.get({list}, [[{listidx}], [{default}]])
	コマンドライン全体の単語から一番初めにマッチした単語文字列を返す。マッ
	チするものがなければ{default}(既定: "")を返す。
	インデックス番号{idx} 正規表現{regexp} リスト{list}の3種類の指定ができ
	る。{idx}の場合、{is-ignoreopt}に1を指定するとオプション引数をインデッ
	クスに数えない (単語に含まれていないかのように扱う)。
	第一引数がリスト{list}の場合、いずれかの要素に一致するものを返す。
	{listidx}が指定された場合、マッチした結果からそのindexの要素を返す。


	Cmpl.get_parts({regexp}, {len})
	コマンドライン全体を単語区切りで分割したリストから、正規表現{regexp}に
	初めにマッチする単語から始まって長さが{len}の部分リストを返す。
	マッチするものがないときには空リストを返す。長さ{len}分の要素が取得で
	きなかったときには取得できたところまでの長さのリストを返す。


	Cmpl.matches({regexp})
	Cmpl.matches({list})
	コマンドライン全体の単語から正規表現{regexp}にマッチしたもの全てをリス
	トにして返す。リスト{list}の場合、いずれかの要素に一致するもの全てを返
	す。


	Cmpl.get_left({idx}, [[{ignoreopt}], [{default}]])
	Cmpl.get_left({regexp}, [{default}])
	Cmpl.get_left({list}, [{idx}, [{default}]])
	カーソルより左のコマンドラインの単語から一番初めにマッチした単語文字列
	を返す。マッチするものがなければ{default}(既定: "")を返す。
	インデックス番号{idx} 正規表現{regexp} リスト{list}の3種類の指定ができ
	る。{idx}の場合、{is-ignoreopt}に1を指定するとオプション引数をインデッ
	クス番号に数えない (単語に含まれていないかのように扱う)。
	第一引数がリスト{list}の場合、いずれかの要素に一致するものを返す。
	{listidx}が指定された場合、マッチした結果からそのindexの要素を返す。


	Cmpl.match_lefts({regexp})
	Cmpl.match_lefts({list})
	カーソルより左のコマンドラインの単語から正規表現{regexp}にマッチしたも
	の全てをリストにして返す。{list}リストの場合、いずれかの要素に一致する
	ものを全て返す。


	Cmpl.filtered({candidates})
	補完候補リスト{candidates}から、文脈に応じて不要なものを削除したリスト
	を返す。文脈とは、既に入力されている文字列や補完対象の文字列(arglead)
	などである。argleadに前方一致マッチする候補が使われる。
	補完候補リスト{candidates}の要素は、文字列か、リストである。
	文字列の場合、例えば以下のようなリストを渡すと、 >
		["foo", "bar", "baz", "qux"]
<	補完候補は "foo" "bar" "baz" "qux" から絞り込まれる。
	リストを渡す場合、その第一要素は補完候補文字列、第二要素以降はその補完
	候補が所属するグループである。
	グループは排他的な候補を作るのに利用する。 >
		["foo", ["bar", "BARZ"], ["baz", "BARZ"], "qux"]
<	この場合、"foo" "bar" "baz" "qux" という候補があり、"bar" と "baz" は
	"BARZ" というグループに属している。、コマンドラインに "bar" "baz" のい
	ずれかが既に入力されているなら、もう片方も補完候補から除外される。
	グループの指定を複数することができる。それには第二要素をリストにするか
	、第三要素以降を利用する。以下の2種類の指定は同じ結果となる。 >
		[["foo", ["A","B"]], ["bar", "A"], ["baz", "B"], "qux"]
		[["foo", "A","B"], ["bar", "A"], ["baz", "B"], "qux"]
<	この場合、"foo" は "A" "B" 両グループに所属するので、"bar" "baz" のど
	ちらかが入力されていると候補に現れないし、 "foo" が入力されているのな
	ら "bar" "baz" は補完候補から除外される。
	特殊なグループとして "__PARM" というものがある。このグループに所属して
	いる補完候補は既に自身や同じグループの候補がコマンドラインに入力されて
	いても、構わず補完候補に現れる。例えば、 >
		[["foo", ["__PARM","A"]], ["bar", "A"], ["baz", "A"], "qux"]
<	の場合、既にコマンドラインに "foo" が入力されていても、 "bar" や "baz"
	が入力されていても、候補には常に "foo" が表示される。ただし AlgLeadの
	絞り込みの影響は受ける。
	グループ名には文字列、数値、浮動小数点数が使える。文字列の場合は空文字
	は利用できない。また、アンダースコアを頭に2つ付けた名前は予約されてい
	る。


	Cmpl.backward_filtered({candidates})
	|Cmpl.filtered()|と同じだが arglead に前方一致ではなく後方一致で絞り込
	む。


	Cmpl.partial_filtered({candidates})
	|Cmpl.filtered()|と同じだが arglead に前方一致ではなく部分一致で絞り込
	む。


	Cmpl.exact_filtered({candidates})
	|Cmpl.filtered()|と同じだが arglead に前方一致ではなく完全一致で絞り込
	む。


	Cmpl.esc_space({filtered-candidates})
	NOTE:
	- この関数は必ず補完関数の処理の最後、return の直前で呼ぶこと。この関
	  数の後に処理を続けてはいけない。
	- Vim 7.3.615 以上のバージョンしかサポートしない場合や、補完候補に空白
	  文字を含まない場合は利用する必要はない。

	Vim 7.3.615 より前のバージョンの Vim のコマンドライン補完はバックスラ
	ッシュでエスケープされた空白文字を認識できず、例えば "Cmd foo\ ba" で
	補完を開始した場合の補完対象 ArgLead は "foo\ ba" ではなく、"ba" だけ
	になってしまい、文字列の置き換えもこの部分だけを対象にしてしまう。
	Cmpl の arglead はバックスラッシュでエスケープされている空白文字を
	認識するが、バックスラッシュでエスケープされている空白文字を含めた単語
	を補完対象にするためにはこの関数|Cmpl.esc_space()|を補完関数の最後に呼
	んだ上で、補完関数の最初で|lim#cmddef#continue()|を呼ぶ必要がある。
	{filtered-candidates}は、その補完関数が返す予定の補完候補リストである。 >
	    command! -nargs=* -complete=customlist,Cmpl Example :echo <q-args>

	    function! Cmpl(arglead, cmdline, crsrpos)
	      if lim#cmddef#continuable()
	        return lim#cmddef#continue()
	      endif
	      let cmpl = lim#cmddef#newCmpl(a:cmdline, a:crsrpos)
	      return cmpl.esc_space(cmpl.filtered(['foo\ bar', 'foo\ baz']))
	    endfunction
<	この Example コマンドの補完を "Example foo\ ba" まで入力した状態で呼ぶ
	と、"foo\ ba" までが補完対象になり、"foo\ bar" "foo\ baz" が補完候補と
	なる。



						*lim#cmddef#newParser()*
lim#cmddef#newParser({args}, [{behavior}])
	コマンド実行時に渡された引数を解釈するパーサ Parser を返す。
	{args}はコマンド引数を単語で区切ってリスト化させたものである。必要に応
	じて|lim#cmddef#split_into_words()|を使用すると良い。
	省略可能な引数{behavior}は辞書であり、次のキーを持たせることができる。
	----------------~
	longoptbgn		(文字列)
		既定値: "--"
		オプション引数の頭に付く文字列。引数先頭文字がこれにマッチすれ
		ばオプション引数と見なされる。

	shortoptbgn		(文字列)
		既定値: "-"
		一文字オプション引数の頭に付く文字列。一文字オプションはこれに
		続けて複数を一度に指定することができる。

	assign		(文字列)
		既定値: "="
		値を取るオプションが利用する代入記号。
		空白文字にした場合、Parser.parse_options() の挙動が変化する
		。

	================~
	Parser オブジェクトは以下の変数とメソッドを持つ。
	--------~
	Parser.args			(リスト)
		初期化時に渡されたコマンドライン引数リスト{args}。後記のメソッ
		ドの副作用で幾つかの要素が削除されるかもしれない。

	Parser.args_original		(リスト)
		初期化時に渡されたままの args。args と違ってメソッドの副作用を
		受けない。
	--------~
	Parser.get({idx}, [[{is-ignoreopt}], [{default}]])
	Parser.get({regexp}, [{default}])
	Parser.get({list}, [[{listidx}], [{default}]])
	コマンドライン引数から一番初めにマッチした単語文字列を返す。マッチする
	ものがなければ{default}(既定: "")を返す。
	インデックス番号{idx} 正規表現{regexp} リスト{list}の3種類の指定ができ
	る。{idx}の場合、{is-ignoreopt}に1を指定するとオプション引数をインデッ
	クス番号に数えない (単語に含まれていないかのように扱う)。
	第一引数がリスト{list}の場合、いずれかの要素に一致するものを返す。
	{listidx}が指定された場合、マッチした結果からそのindexの要素を返す。


	Parser.matches({pat})
	コマンドライン引数から{pat}にマッチしたもの全てをリストにして返す。
	{pat}がリストの場合、いずれかの要素に一致するもの全てを返す。


	Parser.divide({pat}, [{way}])
	パターン{pat}に従って複数のグループに分割した args を返す。分割のやり
	方{way}には "start" "sep" "stop" のいずれかを指定する (既定: "sep")。
	"start" の場合はパターン{pat}にマッチした要素を新しいグループの始まり
	とする。"sep" を指定した場合はパターン{pat}を区切りとして args を分割
	し、"sep" となった要素そのものは取り除かれる。"stop" を指定した場合は
	、パターン{pat}を分割グループの終点とする。


	Parser.filter({string}, [{scope}])
	{string}は|filter()|で使われるフィルタパターンと同じである。
	args から {string} の評価が 0 の要素を取り除く (v:val にはargs の各要
	素が代入される)。{string}の中で関数ローカル変数を使いたい場合には、
	{scope}に|l:|を渡さなければいけない。
	args を返す。


	Parser.parse_options({optdict}, [{idx}])
	Parser.parse_options({optdict}, [{range}])
	どのようなオプション引数が使われたのかを解釈する。args の各要素から
	{optdict}で指定されたパターンにマッチするものを評価し、オプション引数
	として評価された要素は args から取り除かれる。
	数値{idx}を指定した場合、args のそのインデックスの要素についてのみを評
	価する。始点終点2つの要素を持つリスト{range}を指定した場合、その範囲の
	要素だけを評価する。
	{optdict}は辞書であり、キーにオプション名、値にリストを指定する。
	リストの要素は4要素からなり、数値か文字列かリストである。
	リストの中で初めに見つかった数値か文字列は、そのオプションが省略された
	ときのデフォルト値と見なされる。これが省略されると 0 がデフォルト値に
	なる。
	そのあとでリストで見つかった 0 か 1 か 2 の数値はそのオプションが値を
	受け取れるかどうかを示す。0 だと受け取れない、1 だと受け取ることができ
	る。 2 だと必須である。省略されると 1 と見なされる。
		NOTE |lim#cmddef#newParser()|の{behavior}.assign が空白文字の
		場合、引数を取りたくなければ 0 に設定する必要がある。
	リストの中で初めに見つかった文字列のリストは引数のパターンを示す。文字
	列のリストのいずれかに先頭マッチしたらそれはこのオプションであると見な
	される。省略されると辞書{optdict}のキー(オプション名)の頭に longoptbgn
	(既定では "--") が付与されたものがパターンとなる。
	リストの中で次に見つかった文字列のリストは否定パターンとなる。これらの
	文字列のいずれかに先頭マッチしたらそのオプションは否定された(値は0であ
	る)と見なされる。省略されると否定パターンは定義されない。 >
		parser.parse_options({'foo': [0, ['--foo']],
		\ 'bar': [0, ['--bar']], 'baz': [1, ['--baz']]})
<	次のようにデフォルト値と引数パターンを逆にしてもよい。 >
		parser.parse_options({'foo': [['--foo'], 0],
		\ 'bar': [['--bar'], 0], 'baz': [['--baz'], 1]})
<	この場合、もし `:ExamCmd --foo xxx` というコマンドがこれを使って解釈さ
	れたならば {"foo": 1, "bar": 0, "baz": 1} という値が返される。そして
	args からは `--foo` が取り除かれる。
	オプション引数の別名がある場合、パターンをリストにすることで複数指定が
	できる。 >
	    parser.parse_options({'foo': [['--foo', '-f'], 0],
	     \ 'bar': [['--bar', '-b'], 0], 'baz': [['--baz', '-z'], 1]})
<	また、2つ目のパターンリストを渡すことが出来る。そのパターンにマッチす
	るとそのオプションは否定された(0である)と見なされる。 >
	    parser.parse_options({'foo': [['--foo', '-f'], ['--no-foo'], 0],
	     \ 'bar': [0, [], ['--no-bar']],
	     \ 'baz': [['--baz', '-z'], ['--no-baz', '-Z'], 1]})
<	この場合、--no-bar --no-baz -Z が与えられていれば、bar, baz の値は0と
	なる。引数に否定パターンと通常パターンが混在している場合、否定パターン
	の方が優先される。
	デフォルト値やパターンは省略することができる。 >
	    parser.parse_options({'foo': [['--foo']],
	     \ 'bar': [],
	     \ 'baz': [1]})
<	さらに省略することも出来る。 >
	    parser.parse_options({'foo': ['--foo'],
	     \ 'bar': 'bar_default',
	     \ 'baz': 1})
<	デフォルト値が省略された場合、それは0とみなされる。パターンが省略され
	た場合、辞書のキー(オプション名)の頭に longoptbgn (既定では"--")が付与
	されたものと見なされる。(この場合 "bar" "baz"はパターンが省略されてい
	るので、それぞれ "--" が付与された ["--bar"] と ["--baz"] がパターンと
	見なされる。)


==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:
