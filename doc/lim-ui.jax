*lim-ui.txt*	キー入力型インターフェイスを提供する。
*lim-ui*

==============================================================================
概要						*lim-ui-introduction*

キー入力型インターフェイスを提供する。


==============================================================================
インターフェイス				*lim-ui-interface*

------------------------------------------------------------------------------
関数						*lim-ui-functions*

						*lim#ui#select()*
lim#ui#select({prompt}, {choices}, [{behavior}])
	プロンプト{prompt}と選択肢を表示し、その中から1つを任意の文字列をユー
	ザに入力されて選ばせる。|inputlist()|と同じような使い方が出来る。
	戻り値はリストである。その中身は [入力, 説明, その他の要素..] となって
	いる(後述)。 |lim#ui#select()-return-value|
	省略可能な辞書{behavior}(辞書)で関数の挙動を変更できる。
	{behavior}は以下のキーを持つことができる。
	--------~
	silent			(数値)
		既定値: 0
		1 にすると選択肢を表示しない。プロンプトは表示する。
	sort			(数値)
		既定値: 0
		1 にすると選択肢を入力基準でソートして表示する。
	expand			(数値)
		既定値: 0
		非0 にすると "<CR>" や "<C-a>" といったVimの|key-notation|表記
		を特殊文字に変換して "\<CR>" "\<C-a>" といった形にする。
	cancel_inputs		(リスト)
		既定値: ["\<Esc>", "\<C-c>"]
		このリストが空のときには "\<C-c>" が加えられる。
		このリストの要素は1文字でなければならない。
		このリストにある入力を受け取った場合、選択をキャンセルして関数
		を抜ける。そのとき戻り値は [] になる。
		選択肢{choices}の入力よりも優先される。
	error_inputs	(数値/リスト)
		既定値: []
		リストにすると、リストに定義されている要素が入力されたときに例
		外が投げられる。
		数値 非0 にすると cancel_inputs と同じ値が使われる。
		cancel_inputs よりも優先される。

	選択肢{choices}は小リストのリストである。
	小リストは選択肢の1つ1つであり、解釈に失敗した小リストは無視される。
	また、マッチする選択が複数あった場合、一番初めにマッチした選択が使われ
	る。
	以下のようなものである。 >
		[
		\ ['a', 'this is a'],
		\ [['b', 'c', "\<C-a>"], 'this is b or c or <C-a>'],
		\ ['de', 'this is de'],
		\ ['df', 'this is df'],
		\ ["\<Esc>", ''],
		\ ]
<	小リストの第1要素には受け取る入力(input)を定義する。これは文字列かリス
	トである。リストの場合は複数の入力を受け取ることが出来る。
	2文字以上の文字列を定義しているときにはその2文字が続けて入力されたとき
	にそれが選択される。定義されていない文字列が入力された場合は入力がリセ
	ットされ、改めてユーザの入力待ちになる。

	小リストの第2要素にはその選択肢の説明(caption)を定義する。
	これが選択肢として表示されるときの説明になる。空文字を指定するとその入
	力は選択肢には表示されない。

	小リストには第3要素以降も定義することが出来る。 >
		[
		\ ['a', 'this is a', 'foo', 'bar', 'baz'],
		\ [['b', 'c'], 'this is b or c', 0, 1, 2, 3],
		\ ['de', 'this is de', {'input': 'de'}],
		\ ['df', 'this is df', [1234]],
		\ ["\<Esc>", '', 'escaped'],
		\ ]
<	これらは処理上は無視されるが、戻り値には現れるので以降の処理で利用する
	ことが出来る。
					*lim#ui#select()-return-value*
	lim#ui#select()の戻り値は選択肢{choices}の中にある、選択された小リ
	ストのようなものが返される。
	例えば、上の例だと、ユーザが "a" を入力したときには >
		['a', 'this is a', 'foo', 'bar', 'baz']
<	が返される。
	ただし、入力がリストの場合、第1要素は実際の入力に直される。
	上の例で "c" の入力を受け取った場合、 >
		[['b', 'c'], 'this is b or c', 0, 1, 2, 3]
<	ではなく、 >
		['c', 'this is b or c', 0, 1, 2, 3]
<	が返される。



lim#ui#keybind({binddefs}, [{behavior}])	*lim#ui#keybind()*
	キー入力を受け取り、それがキーバインド定義{binddefs}で定義されたキーバ
	インドと一致したならばそのアクション名を返す。
	定義{binddefs}(辞書)のキーには任意のアクション名、値にはキーバインド
	(文字列または文字列のリスト)を渡す。
	戻り値は辞書である。その辞書は次のキーを持つ。
		action		(文字列)
			定義の中でマッチしたアクション名。マッチするものがなけ
			れば空文字を返す。
		surplus		(文字列)
			action にマッチする入力の後で打たれた余剰の入力。
	例 >
	let def = {'act1': ['a', 'b1'], 'act2': 'b2', 'act3': "\<C-x>"}
	echo "type 'a', 'b1', 'b2', or '<C-x>'"
	let inputs = lim#ui#keybind(def)
	if inputs!={}
	  call s:{inputs.action}()
	endif
<	この例では、a や b1 を入力すると s:act1() が実行され、b2 で s:act2()、
	<C-x> で s:act3() が実行される。
	なお、脱出不能を防ぐためにデフォルトでは <C-c> で入力待ち状態を解除し
	て空辞書を返すようになっている。ただしキーバインド定義に <C-c> を含ん
	でいるのならそちらが優先される。

	省略可能な辞書{behavior}(辞書)で関数の挙動を変更できる。
	{behavior}は以下のキーを持つことができる。
	--------~
	expand			(数値)
		既定値: 0
		非0 にすると "<CR>" や "<C-a>" といったVimの|key-notation|表記
		を特殊文字に変換して "\<CR>" "\<C-a>" といった形にする。
	transit			(数値)
		既定値: 0
		非0 にすると入力がアクションにマッチしなかった場合、受け取りを
		終了して、入力されたそのままの文字列を返す。
	async			(辞書)
		既定値: {}
		非同期処理を実現したいときに利用する。
		この辞書が持つことのできるキーは "time"(数値) "func"(リスト)
		である。
		入力待ちをしているときに、一定時間が経つと関数を実行する。
		"time" は待ち時間でこの秒数が経過すると "func" で指定された関
		数が実行される。省略時の値は 0.5 である。
		"func" のリストの取る値は|call()|が取る引数と同じと見ることが
		できる。
		これの第一要素は関数(文字列/|Funcref|)、第二要素はその関数に渡
		される引数のリスト(リスト)、第三要素は"dict"属性付きの関数にお
		いてその関数の"self"にあたるオブジェクト(辞書)("dict"属性付き
		関数でなければ省略可能)である。
		NOTE: この機能を有効にするとCPUを多く消費するかもしれない。


==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:
